#!/usr/bin/env bash

declare -ar fixtures=(
    'bench_eddsa_poseidon'
    'bench_poseidon2_hash'
    'bench_poseidon2_hash_100'
    'bench_poseidon2_hash_30'
    'bench_poseidon_hash'
    'bench_poseidon_hash_100'
    'bench_poseidon_hash_30'
    'semaphore_depth_10'
    'sha512_100_bytes'
)

declare -Ar __func_puts=(
    ['prepare']='Compiling circuit'
)

die ()
{
    printf '\033[1;31m%s\033[0m\n' "Function '$1' not found, exiting"
    exit 1
}

puts ()
{
    printf '==> \033[1;35m%s\033[0m%s\n' "$1" "${*:2}"
}

# Execute a shell function, wrapping it in section pretty-printing messages.
#   - $1 = shell function.
#   - $2 onwards passed down as-is.
call ()
{
    declare f_ptr="$1"

    # Check that f_ptr refers to a valid function name.
    if [[ ! $(declare -F "$f_ptr") ]]; then
        die "$f_ptr"
    fi

    # Avoiding use of `time` to reduce process hierarchy. Pedantic.
    declare start_time="$EPOCHREALTIME"

    puts "${__func_puts[$f_ptr]}" '...'

    # Execute f_ptr
    # TODO: Pass further args.
    "$f_ptr"

    declare end_time="$EPOCHREALTIME"

    printf -v duration '(in: \033[1;33m%.6f\033[0m us)' "$(bc -l <<< "$end_time - $start_time")"

    # puts '... done' "$\033[1;30m(in: $duration)\033[0m"
    puts '... done' " $duration"
}

# Prepare to warmup and then benchmark a specific fixture.
prepare ()
{
    # Compile circuit to bytecode so `nargo execute` does not include that time. We don't care about benchmarking compilation since it only consists of the lowering to ACVM bytecode IIRC. Nothing to do with witness generation happens here.
    nargo compile --force --workspace --silence-warnings
}

warmup ()
{
    puts 'Warming up benchmark fixture...'

    for ((i = 0 ; i < max ; i++ )); do
        echo "$i"
    done

    puts '... done'
}

measure_witness ()
{
    echo 'hi there'
}

measure_proving ()
{
    echo 'TODO: Proving'
}

measure_verifying ()
{
    echo 'TODO: Verifying'
}

benchmark ()
{
    call prepare
}

printf '\033[35m------------ AZTEC BENCHMARKS ------------\033[0m\n'

benchmark
